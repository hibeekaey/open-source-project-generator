# {{.Name}} API Documentation

This document provides comprehensive documentation for the {{.Name}} REST API.

## ðŸ“‹ Table of Contents

- [Overview](#overview)
- [Authentication](#authentication)
- [Base URL](#base-url)
- [Response Format](#response-format)
- [Error Handling](#error-handling)
- [Rate Limiting](#rate-limiting)
- [API Endpoints](#api-endpoints)
- [Data Models](#data-models)
- [Examples](#examples)
- [SDKs and Libraries](#sdks-and-libraries)

## Overview

The {{.Name}} API is a RESTful web service that provides programmatic access to {{.Name}} functionality. The API is designed to be straightforward, consistent, and easy to use.

### API Version

- **Current Version**: v1
- **Base Path**: `/api/v1`
- **Protocol**: HTTPS only
- **Format**: JSON

### Features

- **RESTful Design**: Follows REST principles and conventions
- **JSON API**: All requests and responses use JSON format
- **Authentication**: JWT-based authentication with refresh tokens
- **Rate Limiting**: Configurable rate limits to prevent abuse
- **Pagination**: Cursor-based pagination for large datasets
- **Filtering**: Advanced filtering and search capabilities
- **Validation**: Comprehensive input validation and error reporting
- **Documentation**: Interactive Swagger/OpenAPI documentation

## Authentication

The API uses JWT (JSON Web Token) authentication with refresh tokens for secure access.

### Authentication Flow

1. **Login**: Obtain access and refresh tokens
2. **Access**: Use access token for API requests
3. **Refresh**: Use refresh token to obtain new access tokens
4. **Logout**: Invalidate tokens when done

### Login

```http
POST /api/v1/auth/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "your-password"
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "expires_in": 3600,
    "token_type": "Bearer",
    "user": {
      "id": "123e4567-e89b-12d3-a456-426614174000",
      "email": "user@example.com",
      "name": "John Doe",
      "role": "user"
    }
  }
}
```

### Using Access Tokens

Include the access token in the `Authorization` header:

```http
GET /api/v1/users/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

### Refresh Tokens

When the access token expires, use the refresh token to get a new one:

```http
POST /api/v1/auth/refresh
Content-Type: application/json

{
  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

### Token Expiration

- **Access Token**: 1 hour (3600 seconds)
- **Refresh Token**: 30 days (2592000 seconds)

## Base URL

### Development
```
http://localhost:8080/api/v1
```

### Production
```
https://api.{{.Name}}.com/v1
```

## Response Format

All API responses follow a consistent format:

### Success Response

```json
{
  "success": true,
  "data": {
    // Response data here
  },
  "meta": {
    "timestamp": "2024-01-15T10:30:00Z",
    "request_id": "req_123456789"
  }
}
```

### Error Response

```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid input data",
    "details": [
      {
        "field": "email",
        "message": "Email is required"
      }
    ]
  },
  "meta": {
    "timestamp": "2024-01-15T10:30:00Z",
    "request_id": "req_123456789"
  }
}
```

### Paginated Response

```json
{
  "success": true,
  "data": [
    // Array of items
  ],
  "pagination": {
    "total": 150,
    "page": 1,
    "per_page": 20,
    "total_pages": 8,
    "has_next": true,
    "has_prev": false,
    "next_cursor": "eyJpZCI6IjEyMyJ9",
    "prev_cursor": null
  },
  "meta": {
    "timestamp": "2024-01-15T10:30:00Z",
    "request_id": "req_123456789"
  }
}
```

## Error Handling

### HTTP Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | OK - Request successful |
| 201 | Created - Resource created successfully |
| 204 | No Content - Request successful, no content to return |
| 400 | Bad Request - Invalid request data |
| 401 | Unauthorized - Authentication required |
| 403 | Forbidden - Insufficient permissions |
| 404 | Not Found - Resource not found |
| 409 | Conflict - Resource already exists |
| 422 | Unprocessable Entity - Validation error |
| 429 | Too Many Requests - Rate limit exceeded |
| 500 | Internal Server Error - Server error |

### Error Codes

| Error Code | Description |
|------------|-------------|
| `VALIDATION_ERROR` | Input validation failed |
| `AUTHENTICATION_ERROR` | Authentication failed |
| `AUTHORIZATION_ERROR` | Insufficient permissions |
| `NOT_FOUND` | Resource not found |
| `CONFLICT` | Resource already exists |
| `RATE_LIMIT_EXCEEDED` | Rate limit exceeded |
| `INTERNAL_ERROR` | Internal server error |

### Error Response Examples

#### Validation Error
```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Validation failed",
    "details": [
      {
        "field": "email",
        "message": "Email must be a valid email address"
      },
      {
        "field": "password",
        "message": "Password must be at least 8 characters long"
      }
    ]
  }
}
```

#### Authentication Error
```json
{
  "success": false,
  "error": {
    "code": "AUTHENTICATION_ERROR",
    "message": "Invalid credentials"
  }
}
```

#### Rate Limit Error
```json
{
  "success": false,
  "error": {
    "code": "RATE_LIMIT_EXCEEDED",
    "message": "Rate limit exceeded. Try again in 60 seconds.",
    "retry_after": 60
  }
}
```

## Rate Limiting

The API implements rate limiting to ensure fair usage and prevent abuse.

### Rate Limits

| User Type | Requests per Hour | Requests per Minute |
|-----------|-------------------|---------------------|
| Anonymous | 100 | 10 |
| Authenticated | 1000 | 60 |
| Premium | 5000 | 300 |

### Rate Limit Headers

Rate limit information is included in response headers:

```http
X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 999
X-RateLimit-Reset: 1642248600
X-RateLimit-Window: 3600
```

### Rate Limit Exceeded

When rate limit is exceeded, the API returns a 429 status code:

```json
{
  "success": false,
  "error": {
    "code": "RATE_LIMIT_EXCEEDED",
    "message": "Rate limit exceeded. Try again in 60 seconds.",
    "retry_after": 60
  }
}
```

## API Endpoints

### Authentication Endpoints

#### POST /auth/login
Authenticate user and obtain tokens.

**Request:**
```json
{
  "email": "user@example.com",
  "password": "password123"
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "access_token": "...",
    "refresh_token": "...",
    "expires_in": 3600,
    "user": {
      "id": "123",
      "email": "user@example.com",
      "name": "John Doe"
    }
  }
}
```

#### POST /auth/refresh
Refresh access token using refresh token.

**Request:**
```json
{
  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

#### POST /auth/logout
Logout and invalidate tokens.

**Headers:**
```
Authorization: Bearer <access_token>
```

#### POST /auth/register
Register a new user account.

**Request:**
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "password123",
  "password_confirmation": "password123"
}
```

### User Endpoints

#### GET /users/me
Get current user profile.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "123e4567-e89b-12d3-a456-426614174000",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "user",
    "created_at": "2024-01-15T10:30:00Z",
    "updated_at": "2024-01-15T10:30:00Z"
  }
}
```

#### PUT /users/me
Update current user profile.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Request:**
```json
{
  "name": "John Smith",
  "email": "johnsmith@example.com"
}
```

#### GET /users
List users (admin only).

**Headers:**
```
Authorization: Bearer <access_token>
```

**Query Parameters:**
- `page` (integer): Page number (default: 1)
- `per_page` (integer): Items per page (default: 20, max: 100)
- `search` (string): Search term
- `role` (string): Filter by role
- `sort` (string): Sort field (name, email, created_at)
- `order` (string): Sort order (asc, desc)

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id": "123",
      "name": "John Doe",
      "email": "john@example.com",
      "role": "user",
      "created_at": "2024-01-15T10:30:00Z"
    }
  ],
  "pagination": {
    "total": 150,
    "page": 1,
    "per_page": 20,
    "total_pages": 8
  }
}
```

#### GET /users/{id}
Get user by ID (admin only).

#### POST /users
Create new user (admin only).

#### PUT /users/{id}
Update user (admin only).

#### DELETE /users/{id}
Delete user (admin only).

### Role Endpoints

#### GET /roles
List all roles.

#### GET /roles/{id}
Get role by ID.

#### POST /roles
Create new role (admin only).

#### PUT /roles/{id}
Update role (admin only).

#### DELETE /roles/{id}
Delete role (admin only).

## Data Models

### User Model

```json
{
  "id": "string (UUID)",
  "name": "string (required, max: 100)",
  "email": "string (required, unique, email format)",
  "role": "string (enum: user, admin)",
  "email_verified": "boolean",
  "created_at": "string (ISO 8601 datetime)",
  "updated_at": "string (ISO 8601 datetime)"
}
```

### Role Model

```json
{
  "id": "string (UUID)",
  "name": "string (required, unique, max: 50)",
  "description": "string (max: 255)",
  "permissions": ["string"],
  "created_at": "string (ISO 8601 datetime)",
  "updated_at": "string (ISO 8601 datetime)"
}
```

### Error Model

```json
{
  "code": "string (error code)",
  "message": "string (human-readable message)",
  "details": [
    {
      "field": "string (field name)",
      "message": "string (field-specific error)"
    }
  ]
}
```

## Examples

### Complete Authentication Flow

```bash
# 1. Register a new user
curl -X POST http://localhost:8080/api/v1/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "John Doe",
    "email": "john@example.com",
    "password": "password123",
    "password_confirmation": "password123"
  }'

# 2. Login to get tokens
curl -X POST http://localhost:8080/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "john@example.com",
    "password": "password123"
  }'

# 3. Use access token to get user profile
curl -X GET http://localhost:8080/api/v1/users/me \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN"

# 4. Update user profile
curl -X PUT http://localhost:8080/api/v1/users/me \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "John Smith"
  }'

# 5. Refresh access token
curl -X POST http://localhost:8080/api/v1/auth/refresh \
  -H "Content-Type: application/json" \
  -d '{
    "refresh_token": "YOUR_REFRESH_TOKEN"
  }'

# 6. Logout
curl -X POST http://localhost:8080/api/v1/auth/logout \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN"
```

### Pagination Example

```bash
# Get first page of users
curl -X GET "http://localhost:8080/api/v1/users?page=1&per_page=10" \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN"

# Get users with search and filtering
curl -X GET "http://localhost:8080/api/v1/users?search=john&role=user&sort=name&order=asc" \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN"
```

### Error Handling Example

```javascript
// JavaScript example with error handling
async function getUser(userId) {
  try {
    const response = await fetch(`/api/v1/users/${userId}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (!data.success) {
      // Handle API error
      console.error('API Error:', data.error.message);
      
      if (data.error.code === 'AUTHENTICATION_ERROR') {
        // Redirect to login
        window.location.href = '/login';
      }
      
      return null;
    }
    
    return data.data;
  } catch (error) {
    // Handle network error
    console.error('Network Error:', error);
    return null;
  }
}
```

## SDKs and Libraries

### Official SDKs

We provide official SDKs for popular programming languages:

#### JavaScript/TypeScript
```bash
npm install @{{.Organization}}/{{.Name}}-sdk
```

```javascript
import { {{.Name}}Client } from '@{{.Organization}}/{{.Name}}-sdk';

const client = new {{.Name}}Client({
  baseURL: 'https://api.{{.Name}}.com/v1',
  apiKey: 'your-api-key'
});

// Get current user
const user = await client.users.me();
```

#### Go
```bash
go get github.com/{{.Organization}}/{{.Name}}-go-sdk
```

```go
import "github.com/{{.Organization}}/{{.Name}}-go-sdk"

client := {{.Name}}.NewClient("https://api.{{.Name}}.com/v1", "your-api-key")

// Get current user
user, err := client.Users.Me(context.Background())
```

#### Python
```bash
pip install {{.Name}}-sdk
```

```python
from {{.Name}}_sdk import Client

client = Client(
    base_url="https://api.{{.Name}}.com/v1",
    api_key="your-api-key"
)

# Get current user
user = client.users.me()
```

### Community SDKs

Community-maintained SDKs are available for:
- Ruby
- PHP
- Java
- C#
- Rust

See our [SDK documentation](https://docs.{{.Name}}.com/sdks) for more information.

## Interactive Documentation

### Swagger UI

Interactive API documentation is available at:
- **Development**: [http://localhost:8080/swagger](http://localhost:8080/swagger)
- **Production**: [https://api.{{.Name}}.com/swagger](https://api.{{.Name}}.com/swagger)

### OpenAPI Specification

The complete OpenAPI specification is available at:
- **Development**: [http://localhost:8080/openapi.json](http://localhost:8080/openapi.json)
- **Production**: [https://api.{{.Name}}.com/openapi.json](https://api.{{.Name}}.com/openapi.json)

## Webhooks

The API supports webhooks for real-time event notifications:

### Supported Events
- `user.created`
- `user.updated`
- `user.deleted`
- `auth.login`
- `auth.logout`

### Webhook Configuration

Configure webhooks in your account settings or via the API:

```bash
curl -X POST http://localhost:8080/api/v1/webhooks \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "url": "https://your-app.com/webhooks/{{.Name}}",
    "events": ["user.created", "user.updated"],
    "secret": "your-webhook-secret"
  }'
```

## Support

### Getting Help

- **Documentation**: [https://docs.{{.Name}}.com](https://docs.{{.Name}}.com)
- **API Support**: api-support@{{.Organization}}.com
- **Community**: [GitHub Discussions](https://github.com/{{.Organization}}/{{.Name}}/discussions)
- **Status Page**: [https://status.{{.Name}}.com](https://status.{{.Name}}.com)

### Reporting Issues

- **Bug Reports**: [GitHub Issues](https://github.com/{{.Organization}}/{{.Name}}/issues)
- **Security Issues**: security@{{.Organization}}.com
- **Feature Requests**: [GitHub Discussions](https://github.com/{{.Organization}}/{{.Name}}/discussions)

---

**API Version**: v1  
**Last Updated**: {{.GeneratedAt.Format "2006-01-02"}}  
**Contact**: api-support@{{.Organization}}.com