package security

import "regexp"

// getSecurityLintRules returns all predefined security linting rules
func getSecurityLintRules() []LintRule {
	return []LintRule{
		// Insecure Random Generation Rules
		{
			ID:          "SEC001",
			Name:        "Timestamp-based Random Generation",
			Pattern:     regexp.MustCompile(`time\.Now\(\)\.UnixNano\(\)`),
			PatternStr:  `time\.Now\(\)\.UnixNano\(\)`,
			Category:    "cryptography",
			Severity:    SeverityCritical,
			Description: "Timestamp-based random generation is predictable",
			Message:     "Using time.Now().UnixNano() for random generation creates predictable values",
			Suggestion:  "Use crypto/rand for cryptographically secure random generation",
			Enabled:     true,
			Tags:        []string{"random", "predictable", "timestamp", "security"},
		},
		{
			ID:          "SEC002",
			Name:        "Math/rand Usage",
			Pattern:     regexp.MustCompile(`import.*["']math/rand["']`),
			PatternStr:  `import.*["']math/rand["']`,
			Category:    "cryptography",
			Severity:    SeverityHigh,
			Description: "math/rand provides predictable pseudorandom numbers",
			Message:     "math/rand is not cryptographically secure and should not be used for security-sensitive operations",
			Suggestion:  "Use crypto/rand for security-sensitive random number generation",
			Enabled:     true,
			Tags:        []string{"random", "predictable", "import", "security"},
		},
		{
			ID:          "SEC003",
			Name:        "Predictable Random Functions",
			Pattern:     regexp.MustCompile(`rand\.(?:Int|Int31|Int63|Intn|Float32|Float64)\(`),
			PatternStr:  `rand\.(?:Int|Int31|Int63|Intn|Float32|Float64)\(`,
			Category:    "cryptography",
			Severity:    SeverityHigh,
			Description: "Predictable random function from math/rand package",
			Message:     "Using predictable random functions from math/rand package",
			Suggestion:  "Use crypto/rand.Read() or security.SecureRandom interface",
			Enabled:     true,
			Tags:        []string{"random", "predictable", "function", "security"},
		},
		{
			ID:          "SEC004",
			Name:        "Timestamp-based ID Generation",
			Pattern:     regexp.MustCompile(`fmt\.Sprintf\([^)]*time\.Now\(\)\.Unix(?:Nano)?\(\)`),
			PatternStr:  `fmt\.Sprintf\([^)]*time\.Now\(\)\.Unix(?:Nano)?\(`,
			Category:    "cryptography",
			Severity:    SeverityHigh,
			Description: "ID generation using timestamps is predictable",
			Message:     "Generating IDs using timestamps creates predictable identifiers",
			Suggestion:  "Use secure random ID generation with crypto/rand",
			Enabled:     true,
			Tags:        []string{"id", "predictable", "timestamp", "security"},
		},
		{
			ID:          "SEC005",
			Name:        "Predictable Temporary File Names",
			Pattern:     regexp.MustCompile(`\.tmp\..*time\.Now\(\)|time\.Now\(\).*\.tmp`),
			PatternStr:  `\.tmp\..*time\.Now\(\)|time\.Now\(\).*\.tmp`,
			Category:    "filesystem",
			Severity:    SeverityCritical,
			Description: "Temporary file names using timestamps are vulnerable to race conditions",
			Message:     "Predictable temporary file names can lead to race condition attacks",
			Suggestion:  "Use secure random suffixes for temporary file names",
			Enabled:     true,
			Tags:        []string{"tempfile", "predictable", "race-condition", "security"},
		},

		// CORS Security Rules
		{
			ID:          "SEC010",
			Name:        "CORS Null Origin",
			Pattern:     regexp.MustCompile(`Access-Control-Allow-Origin.*["']null["']`),
			PatternStr:  `Access-Control-Allow-Origin.*["']null["']`,
			Category:    "cors",
			Severity:    SeverityCritical,
			Description: "CORS null origin allows bypass attacks",
			Message:     "Setting Access-Control-Allow-Origin to 'null' can allow bypass attacks",
			Suggestion:  "Omit the Access-Control-Allow-Origin header for disallowed origins",
			Enabled:     true,
			Tags:        []string{"cors", "null-origin", "bypass", "security"},
		},
		{
			ID:          "SEC011",
			Name:        "CORS Wildcard with Credentials",
			Pattern:     regexp.MustCompile(`Access-Control-Allow-Origin.*\*.*Access-Control-Allow-Credentials.*true|Access-Control-Allow-Credentials.*true.*Access-Control-Allow-Origin.*\*`),
			PatternStr:  `Access-Control-Allow-Origin.*\*.*Access-Control-Allow-Credentials.*true`,
			Category:    "cors",
			Severity:    SeverityHigh,
			Description: "CORS wildcard with credentials is insecure",
			Message:     "Using wildcard (*) for Access-Control-Allow-Origin with credentials enabled is insecure",
			Suggestion:  "Use specific origins instead of wildcard when credentials are allowed",
			Enabled:     true,
			Tags:        []string{"cors", "wildcard", "credentials", "security"},
		},
		{
			ID:          "SEC012",
			Name:        "CORS Overly Permissive",
			Pattern:     regexp.MustCompile(`Access-Control-Allow-Origin.*["']\*["']`),
			PatternStr:  `Access-Control-Allow-Origin.*["']\*["']`,
			Category:    "cors",
			Severity:    SeverityMedium,
			Description: "Wildcard CORS policy allows requests from any origin",
			Message:     "Wildcard CORS policy allows requests from any origin",
			Suggestion:  "Specify explicit allowed origins instead of using wildcard",
			Enabled:     true,
			Tags:        []string{"cors", "wildcard", "permissive", "security"},
		},

		// Authentication Security Rules
		{
			ID:          "SEC020",
			Name:        "JWT None Algorithm",
			Pattern:     regexp.MustCompile(`(?i)jwt\.SigningMethodNone|algorithm.*["']none["']`),
			PatternStr:  `(?i)jwt\.SigningMethodNone|algorithm.*["']none["']`,
			Category:    "authentication",
			Severity:    SeverityCritical,
			Description: "JWT 'none' algorithm allows token forgery",
			Message:     "JWT 'none' algorithm allows token forgery and should never be used",
			Suggestion:  "Use secure algorithms like HS256, RS256, or ES256 for JWT tokens",
			Enabled:     true,
			Tags:        []string{"jwt", "none-algorithm", "forgery", "security"},
		},
		{
			ID:          "SEC021",
			Name:        "Weak JWT Secret",
			Pattern:     regexp.MustCompile(`(?i)jwt.*["'](?:secret|password|123|test)["']`),
			PatternStr:  `(?i)jwt.*["'](?:secret|password|123|test)["']`,
			Category:    "authentication",
			Severity:    SeverityHigh,
			Description: "Weak or default JWT secret detected",
			Message:     "Weak or default JWT secret detected",
			Suggestion:  "Use a strong, randomly generated secret for JWT signing",
			Enabled:     true,
			Tags:        []string{"jwt", "weak-secret", "default", "security"},
		},
		{
			ID:          "SEC022",
			Name:        "Hardcoded Secrets",
			Pattern:     regexp.MustCompile(`(?i)(?:password|secret|key|token).*=.*["'][^"']{8,}["']`),
			PatternStr:  `(?i)(?:password|secret|key|token).*=.*["'][^"']{8,}["']`,
			Category:    "authentication",
			Severity:    SeverityHigh,
			Description: "Potential hardcoded secret or password detected",
			Message:     "Hardcoded secrets should not be stored in source code",
			Suggestion:  "Use environment variables or secure configuration management for secrets",
			Enabled:     true,
			Tags:        []string{"hardcoded", "secret", "password", "security"},
		},

		// SQL Injection Rules
		{
			ID:          "SEC030",
			Name:        "SQL String Concatenation",
			Pattern:     regexp.MustCompile(`(?i)["'].*(?:select|insert|update|delete).*["'].*\+|(?:select|insert|update|delete).*\+`),
			PatternStr:  `(?i)["'].*(?:select|insert|update|delete).*["'].*\+`,
			Category:    "sql-injection",
			Severity:    SeverityCritical,
			Description: "SQL query uses string concatenation which may lead to SQL injection",
			Message:     "SQL query uses string concatenation which is vulnerable to SQL injection",
			Suggestion:  "Use parameterized queries or prepared statements instead of string concatenation",
			Enabled:     true,
			Tags:        []string{"sql", "injection", "concatenation", "security"},
		},
		{
			ID:          "SEC031",
			Name:        "SQL Variable Interpolation",
			Pattern:     regexp.MustCompile(`(?i)(?:select|insert|update|delete).*\$\{.*\}|(?:select|insert|update|delete).*%s`),
			PatternStr:  `(?i)(?:select|insert|update|delete).*\$\{.*\}`,
			Category:    "sql-injection",
			Severity:    SeverityHigh,
			Description: "SQL query directly interpolates variables which may lead to SQL injection",
			Message:     "SQL query directly interpolates variables which is vulnerable to SQL injection",
			Suggestion:  "Use parameterized queries with placeholders ($1, $2, etc.) instead of direct variable interpolation",
			Enabled:     true,
			Tags:        []string{"sql", "injection", "interpolation", "security"},
		},

		// Information Leakage Rules
		{
			ID:          "SEC040",
			Name:        "Detailed Error Messages",
			Pattern:     regexp.MustCompile(`(?i)fmt\.Errorf.*(?:database error|sql error|internal error)`),
			PatternStr:  `(?i)fmt\.Errorf.*(?:database error|sql error|internal error)`,
			Category:    "information-leakage",
			Severity:    SeverityMedium,
			Description: "Detailed error messages may leak sensitive information",
			Message:     "Detailed error messages in production may leak sensitive information",
			Suggestion:  "Use generic error messages in production and log detailed errors securely",
			Enabled:     true,
			Tags:        []string{"error", "information-leakage", "sensitive", "security"},
		},
		{
			ID:          "SEC041",
			Name:        "Debug Information Exposure",
			Pattern:     regexp.MustCompile(`(?i)(?:debug|trace|stack).*(?:true|enabled|on)`),
			PatternStr:  `(?i)(?:debug|trace|stack).*(?:true|enabled|on)`,
			Category:    "information-leakage",
			Severity:    SeverityMedium,
			Description: "Debug information may be exposed in production",
			Message:     "Debug information should not be enabled in production environments",
			Suggestion:  "Disable debug information in production environments",
			Enabled:     true,
			Tags:        []string{"debug", "information-leakage", "production", "security"},
		},

		// Missing Security Headers Rules
		{
			ID:          "SEC050",
			Name:        "Missing X-Content-Type-Options",
			Pattern:     regexp.MustCompile(`(?i)\.Header\(["']Content-Type["'].*["'](?:application/json|text/html)["']`),
			PatternStr:  `(?i)\.Header\(["']Content-Type["'].*["'](?:application/json|text/html)["']`,
			Category:    "security-headers",
			Severity:    SeverityLow,
			Description: "Content-Type header set without X-Content-Type-Options",
			Message:     "Content-Type header set - ensure X-Content-Type-Options: nosniff is also set",
			Suggestion:  "Add X-Content-Type-Options: nosniff header to prevent MIME type sniffing",
			Enabled:     true,
			Tags:        []string{"headers", "content-type", "mime-sniffing", "security"},
		},
		{
			ID:          "SEC051",
			Name:        "Insecure HTTP URLs",
			Pattern:     regexp.MustCompile(`http://[^/\s]+`),
			PatternStr:  `http://[^/\s]+`,
			Category:    "transport-security",
			Severity:    SeverityMedium,
			Description: "Insecure HTTP URL detected",
			Message:     "Insecure HTTP URL detected - verify if HTTPS should be used",
			Suggestion:  "Use HTTPS URLs for all external communications",
			Enabled:     true,
			Tags:        []string{"http", "insecure", "transport", "security"},
		},

		// Cookie Security Rules
		{
			ID:          "SEC060",
			Name:        "Insecure Cookie Configuration",
			Pattern:     regexp.MustCompile(`(?i)cookie|setcookie`),
			PatternStr:  `(?i)cookie|setcookie`,
			Category:    "cookies",
			Severity:    SeverityLow,
			Description: "Cookie configuration detected",
			Message:     "Cookie configuration detected - ensure HttpOnly and Secure flags are set",
			Suggestion:  "Set HttpOnly and Secure flags on sensitive cookies",
			Enabled:     true,
			Tags:        []string{"cookie", "httponly", "secure", "security"},
		},

		// Input Validation Rules
		{
			ID:          "SEC070",
			Name:        "Missing Input Validation",
			Pattern:     regexp.MustCompile(`(?i)(?:request\.body|req\.body|c\.bind).*without.*validation`),
			PatternStr:  `(?i)(?:request\.body|req\.body|c\.bind).*without.*validation`,
			Category:    "input-validation",
			Severity:    SeverityMedium,
			Description: "Input processing without explicit validation detected",
			Message:     "Input processing without explicit validation detected",
			Suggestion:  "Implement proper input validation and sanitization",
			Enabled:     true,
			Tags:        []string{"input", "validation", "sanitization", "security"},
		},

		// File Operation Security Rules
		{
			ID:          "SEC080",
			Name:        "Unsafe File Operations",
			Pattern:     regexp.MustCompile(`(?i)os\.(?:Create|WriteFile|OpenFile).*\+.*user`),
			PatternStr:  `(?i)os\.(?:Create|WriteFile|OpenFile).*\+.*user`,
			Category:    "filesystem",
			Severity:    SeverityHigh,
			Description: "File operations with user-controlled paths detected",
			Message:     "File operations with user-controlled paths may be vulnerable to path traversal",
			Suggestion:  "Validate and sanitize file paths before use",
			Enabled:     true,
			Tags:        []string{"file", "path-traversal", "user-input", "security"},
		},
		{
			ID:          "SEC081",
			Name:        "Directory Traversal Risk",
			Pattern:     regexp.MustCompile(`\.\.\/|\.\.\\`),
			PatternStr:  `\.\.\/|\.\.\\`,
			Category:    "filesystem",
			Severity:    SeverityHigh,
			Description: "Directory traversal pattern detected",
			Message:     "Directory traversal pattern detected in file path",
			Suggestion:  "Validate file paths and prevent directory traversal attacks",
			Enabled:     true,
			Tags:        []string{"directory-traversal", "path", "filesystem", "security"},
		},

		// Cryptographic Rules
		{
			ID:          "SEC090",
			Name:        "Weak Cryptographic Algorithm",
			Pattern:     regexp.MustCompile(`(?i)(?:md5|sha1|des|rc4)`),
			PatternStr:  `(?i)(?:md5|sha1|des|rc4)`,
			Category:    "cryptography",
			Severity:    SeverityHigh,
			Description: "Weak cryptographic algorithm detected",
			Message:     "Weak cryptographic algorithm should not be used for security-sensitive operations",
			Suggestion:  "Use strong cryptographic algorithms like SHA-256, AES, or modern alternatives",
			Enabled:     true,
			Tags:        []string{"crypto", "weak-algorithm", "hash", "security"},
		},
		{
			ID:          "SEC091",
			Name:        "Insecure Random Seed",
			Pattern:     regexp.MustCompile(`rand\.Seed\(time\.Now\(\)`),
			PatternStr:  `rand\.Seed\(time\.Now\(\)`,
			Category:    "cryptography",
			Severity:    SeverityHigh,
			Description: "Predictable random seed using current time",
			Message:     "Using current time as random seed makes random generation predictable",
			Suggestion:  "Use crypto/rand for cryptographically secure random generation",
			Enabled:     true,
			Tags:        []string{"random", "seed", "predictable", "security"},
		},
	}
}
