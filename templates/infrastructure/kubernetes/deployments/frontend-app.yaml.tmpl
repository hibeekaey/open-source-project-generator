{{if .Components.Frontend.MainApp}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Name}}-app
  namespace: {{.Name}}
  labels:
    app.kubernetes.io/name: {{.Name}}-app
    app.kubernetes.io/instance: {{.Name}}
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: {{.Name}}
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: {{.Name}}-app
      app.kubernetes.io/instance: {{.Name}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{.Name}}-app
        app.kubernetes.io/instance: {{.Name}}
        app.kubernetes.io/component: frontend
        app.kubernetes.io/part-of: {{.Name}}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{.Name}}-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1001]
      containers:
      - name: app
        image: {{.Organization}}/{{.Name}}-app:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: {{.Name}}-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: {{.Name}}-config
              key: API_URL
        envFrom:
        - configMapRef:
            name: {{.Name}}-config
        - secretRef:
            name: {{.Name}}-secrets
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
            add: []
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      imagePullSecrets:
      - name: {{.Name}}-registry-secret
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{.Name}}-app
              topologyKey: kubernetes.io/hostname
{{end}}