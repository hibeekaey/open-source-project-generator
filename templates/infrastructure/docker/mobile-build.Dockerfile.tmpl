# Multi-stage Dockerfile for Mobile Build Environment
# Android Build Stage
FROM openjdk:21-jdk-slim AS android-builder

WORKDIR /app

# Install Android SDK
ENV ANDROID_SDK_ROOT=/opt/android-sdk
ENV PATH=${PATH}:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools

RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    git \
    && rm -rf /var/lib/apt/lists/*

# Download and install Android SDK
RUN mkdir -p ${ANDROID_SDK_ROOT}/cmdline-tools && \
    wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
    unzip commandlinetools-linux-9477386_latest.zip -d ${ANDROID_SDK_ROOT}/cmdline-tools && \
    mv ${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools ${ANDROID_SDK_ROOT}/cmdline-tools/latest && \
    rm commandlinetools-linux-9477386_latest.zip

# Accept licenses and install build tools
RUN yes | sdkmanager --licenses && \
    sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

# Copy Android project
COPY android/ ./android/

# Build Android APK
WORKDIR /app/android
RUN ./gradlew assembleRelease

# iOS Build Stage (for CI/CD environments with macOS runners)
FROM alpine:3.20 AS ios-builder

WORKDIR /app

# This stage is primarily for documentation
# iOS builds require macOS environment with Xcode
# This can be used in GitHub Actions with macos runners

COPY ios/ ./ios/

# The actual iOS build would happen in CI/CD with:
# xcodebuild -workspace {{.Name}}.xcworkspace -scheme {{.Name}} -configuration Release archive

# Final stage for build artifacts
FROM alpine:3.20 AS artifacts

WORKDIR /artifacts

# Copy build artifacts
COPY --from=android-builder /app/android/app/build/outputs/apk/release/*.apk ./android/
# iOS artifacts would be copied from CI/CD artifacts

# Create build info
RUN echo "Build completed at $(date)" > build-info.txt
RUN echo "Android APK: $(ls android/)" >> build-info.txt

CMD ["sh", "-c", "echo 'Build artifacts ready' && ls -la"]