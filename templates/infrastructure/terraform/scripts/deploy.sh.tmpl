#!/bin/bash

# {{.Name}} - Terraform Deployment Script
# This script manages Terraform deployments across different environments

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="{{.Name}}"
ORGANIZATION="{{.Organization}}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="$(dirname "$SCRIPT_DIR")"

# Default values
ENVIRONMENT=""
ACTION=""
AUTO_APPROVE=false
DESTROY_CONFIRM=false
PLAN_ONLY=false
BACKEND_CONFIG=""
VAR_FILE=""

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage
usage() {
    echo "Usage: $0 [OPTIONS] ENVIRONMENT ACTION"
    echo ""
    echo "Environments:"
    echo "  development    Development environment"
    echo "  staging        Staging environment"
    echo "  production     Production environment"
    echo ""
    echo "Actions:"
    echo "  plan           Create execution plan"
    echo "  apply          Apply changes"
    echo "  destroy        Destroy infrastructure"
    echo "  init           Initialize Terraform"
    echo "  validate       Validate configuration"
    echo "  fmt            Format configuration files"
    echo "  output         Show output values"
    echo "  state          Manage Terraform state"
    echo ""
    echo "Options:"
    echo "  -a, --auto-approve    Auto approve apply/destroy"
    echo "  -p, --plan-only       Only create plan, don't apply"
    echo "  -f, --force           Force destroy without confirmation"
    echo "  -b, --backend FILE    Backend configuration file"
    echo "  -v, --var-file FILE   Variables file"
    echo "  -h, --help            Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 development plan"
    echo "  $0 staging apply --auto-approve"
    echo "  $0 production destroy --force"
}

# Validate environment
validate_environment() {
    case "${ENVIRONMENT}" in
        "development"|"dev")
            ENVIRONMENT="development"
            VAR_FILE="${TERRAFORM_DIR}/environments/development.tfvars"
            ;;
        "staging"|"stage")
            ENVIRONMENT="staging"
            VAR_FILE="${TERRAFORM_DIR}/environments/staging.tfvars"
            ;;
        "production"|"prod")
            ENVIRONMENT="production"
            VAR_FILE="${TERRAFORM_DIR}/environments/production.tfvars"
            ;;
        *)
            log_error "Invalid environment: ${ENVIRONMENT}"
            log_info "Valid environments: development, staging, production"
            exit 1
            ;;
    esac
    
    if [ ! -f "${VAR_FILE}" ]; then
        log_error "Variables file not found: ${VAR_FILE}"
        exit 1
    fi
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check Terraform
    if ! command -v terraform &> /dev/null; then
        log_error "Terraform is not installed or not in PATH"
        exit 1
    fi
    
    # Check Terraform version
    local tf_version=$(terraform version -json | jq -r '.terraform_version')
    log_info "Terraform version: ${tf_version}"
    
    # Check AWS CLI (if using AWS)
    if grep -q '"aws"' "${VAR_FILE}" && ! command -v aws &> /dev/null; then
        log_warning "AWS CLI is not installed. Some features may not work."
    fi
    
    # Check kubectl
    if ! command -v kubectl &> /dev/null; then
        log_warning "kubectl is not installed. Kubernetes operations may not work."
    fi
    
    log_success "Prerequisites check completed"
}

# Initialize Terraform
terraform_init() {
    log_info "Initializing Terraform for ${ENVIRONMENT} environment..."
    
    cd "${TERRAFORM_DIR}"
    
    local init_args=()
    
    # Add backend config if provided
    if [ -n "${BACKEND_CONFIG}" ]; then
        init_args+=("-backend-config=${BACKEND_CONFIG}")
    fi
    
    # Add workspace-specific backend config
    local backend_file="${TERRAFORM_DIR}/backends/${ENVIRONMENT}.hcl"
    if [ -f "${backend_file}" ]; then
        init_args+=("-backend-config=${backend_file}")
    fi
    
    terraform init "${init_args[@]}"
    
    # Select or create workspace
    if terraform workspace list | grep -q "${ENVIRONMENT}"; then
        // SECURITY FIX: Use parameterized queries instead of variable interpolation
        // Replace ${variable} with $1, $2, etc. and pass values separately
        terraform workspace select "${ENVIRONMENT}"
    else
        terraform workspace new "${ENVIRONMENT}"
    fi
    
    log_success "Terraform initialized for ${ENVIRONMENT} environment"
}

# Validate Terraform configuration
terraform_validate() {
    log_info "Validating Terraform configuration..."
    
    cd "${TERRAFORM_DIR}"
    terraform validate
    
    log_success "Terraform configuration is valid"
}

# Format Terraform files
terraform_fmt() {
    log_info "Formatting Terraform files..."
    
    cd "${TERRAFORM_DIR}"
    terraform fmt -recursive
    
    log_success "Terraform files formatted"
}

# Create Terraform plan
terraform_plan() {
    log_info "Creating Terraform plan for ${ENVIRONMENT} environment..."
    
    cd "${TERRAFORM_DIR}"
    
    local plan_file="${TERRAFORM_DIR}/plans/${ENVIRONMENT}.tfplan"
    mkdir -p "$(dirname "${plan_file}")"
    
    terraform plan \
        -var-file="${VAR_FILE}" \
        -out="${plan_file}" \
        -detailed-exitcode
    
    local exit_code=$?
    
    case ${exit_code} in
        0)
            log_info "No changes detected"
            ;;
        1)
            log_error "Terraform plan failed"
            exit 1
            ;;
        2)
            log_success "Plan created successfully with changes"
            ;;
    esac
    
    return ${exit_code}
}

# Apply Terraform changes
terraform_apply() {
    log_info "Applying Terraform changes for ${ENVIRONMENT} environment..."
    
    cd "${TERRAFORM_DIR}"
    
    local apply_args=()
    apply_args+=("-var-file=${VAR_FILE}")
    
    if [ "${AUTO_APPROVE}" = true ]; then
        apply_args+=("-auto-approve")
    fi
    
    # Check if plan file exists
    local plan_file="${TERRAFORM_DIR}/plans/${ENVIRONMENT}.tfplan"
    if [ -f "${plan_file}" ] && [ "${PLAN_ONLY}" = false ]; then
        log_info "Using existing plan file: ${plan_file}"
        terraform apply "${plan_file}"
    else
        terraform apply "${apply_args[@]}"
    fi
    
    log_success "Terraform changes applied successfully"
}

# Destroy infrastructure
terraform_destroy() {
    if [ "${DESTROY_CONFIRM}" = false ]; then
        log_warning "This will destroy all infrastructure in ${ENVIRONMENT} environment!"
        log_warning "This action cannot be undone!"
        echo ""
        read -p "Are you sure you want to continue? Type 'yes' to confirm: " -r
        
        if [[ ! $REPLY =~ ^yes$ ]]; then
            log_info "Destroy cancelled"
            exit 0
        fi
    fi
    
    log_info "Destroying infrastructure for ${ENVIRONMENT} environment..."
    
    cd "${TERRAFORM_DIR}"
    
    local destroy_args=()
    destroy_args+=("-var-file=${VAR_FILE}")
    
    if [ "${AUTO_APPROVE}" = true ]; then
        destroy_args+=("-auto-approve")
    fi
    
    terraform destroy "${destroy_args[@]}"
    
    log_success "Infrastructure destroyed successfully"
}

# Show Terraform outputs
terraform_output() {
    log_info "Showing Terraform outputs for ${ENVIRONMENT} environment..."
    
    cd "${TERRAFORM_DIR}"
    terraform output -json | jq '.'
}

# Manage Terraform state
terraform_state() {
    log_info "Managing Terraform state for ${ENVIRONMENT} environment..."
    
    cd "${TERRAFORM_DIR}"
    
    echo "Available state commands:"
    echo "  list                 List resources in state"
    echo "  show <resource>      Show resource details"
    echo "  mv <src> <dst>       Move resource in state"
    echo "  rm <resource>        Remove resource from state"
    echo "  import <addr> <id>   Import existing resource"
    echo ""
    
    read -p "Enter state command: " -r state_cmd
    
    case "${state_cmd}" in
        "list")
            terraform state list
            ;;
        "show "*)
            terraform state ${state_cmd}
            ;;
        "mv "*)
            terraform state ${state_cmd}
            ;;
        "rm "*)
            terraform state ${state_cmd}
            ;;
        "import "*)
            terraform state ${state_cmd}
            ;;
        *)
            log_error "Unknown state command: ${state_cmd}"
            exit 1
            ;;
    esac
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--auto-approve)
                AUTO_APPROVE=true
                shift
                ;;
            -p|--plan-only)
                PLAN_ONLY=true
                shift
                ;;
            -f|--force)
                DESTROY_CONFIRM=true
                shift
                ;;
            -b|--backend)
                BACKEND_CONFIG="$2"
                shift 2
                ;;
            -v|--var-file)
                VAR_FILE="$2"
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                if [ -z "${ENVIRONMENT}" ]; then
                    ENVIRONMENT="$1"
                elif [ -z "${ACTION}" ]; then
                    ACTION="$1"
                else
                    log_error "Unknown option: $1"
                    usage
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "${ENVIRONMENT}" ] || [ -z "${ACTION}" ]; then
        log_error "Environment and action are required"
        usage
        exit 1
    fi
}

# Main function
main() {
    parse_args "$@"
    
    validate_environment
    check_prerequisites
    
    # Ensure we're in the right workspace
    if [ "${ACTION}" != "init" ]; then
        terraform_init
    fi
    
    case "${ACTION}" in
        "init")
            terraform_init
            ;;
        "validate")
            terraform_validate
            ;;
        "fmt"|"format")
            terraform_fmt
            ;;
        "plan")
            terraform_plan
            ;;
        "apply")
            if [ "${PLAN_ONLY}" = true ]; then
                terraform_plan
            else
                terraform_apply
            fi
            ;;
        "destroy")
            terraform_destroy
            ;;
        "output")
            terraform_output
            ;;
        "state")
            terraform_state
            ;;
        *)
            log_error "Unknown action: ${ACTION}"
            usage
            exit 1
            ;;
    esac
    
    log_success "Operation completed successfully!"
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi