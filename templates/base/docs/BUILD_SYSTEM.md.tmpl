# {{.Name}} Build System Documentation

This document provides comprehensive information about the {{.Name}} build system, including Makefiles, scripts, and development workflows.

## ðŸ“‹ Table of Contents

- [Overview](#overview)
- [Makefile Structure](#makefile-structure)
- [Build Scripts](#build-scripts)
- [Development Workflow](#development-workflow)
- [Build Targets](#build-targets)
- [Environment Variables](#environment-variables)
- [Customization](#customization)
- [Troubleshooting](#troubleshooting)

## Overview

The {{.Name}} build system is designed to provide a consistent and efficient development experience across all project components. It consists of:

- **Root Makefile**: Central command hub for all development tasks
- **Component Makefiles**: Specialized commands for each service type
- **Shell Scripts**: Automated setup, build, test, and deployment workflows
- **Environment Configuration**: Flexible configuration management

### Design Principles

- **Consistency**: Same commands work across all components
- **Simplicity**: Easy-to-remember command names
- **Flexibility**: Support for different development styles
- **Automation**: Minimize manual setup and configuration
- **Cross-platform**: Works on macOS, Linux, and Windows (WSL)

## Makefile Structure

### Root Makefile (`Makefile`)

The root Makefile serves as the central command hub:

```bash
# Show all available commands
make help

# Common development commands
make setup          # Complete environment setup
make dev            # Start development environment
make test           # Run all tests
make build          # Build all applications
make deploy-prod    # Deploy to production
```

#### Key Features

- **Color-coded output** for better readability
- **Parallel execution** support for faster builds
- **Error handling** with cleanup on failure
- **Cross-platform compatibility**
- **Extensible design** for custom commands

### Component Makefiles

{{if .Components.Frontend.MainApp}}#### Frontend Makefile (`templates/frontend/Makefile.tmpl`)

Specialized commands for frontend development:

```bash
# Frontend-specific commands
make dev-frontend      # Start all frontend servers
make test-frontend     # Run frontend tests
make build-frontend    # Build frontend applications
make lint-frontend     # Lint frontend code
```

**Features:**
- Multi-application support (App, Home, Admin)
- Parallel development server startup
- Comprehensive testing workflows
- Code quality enforcement{{end}}

{{if .Components.Backend.API}}#### Backend Makefile (`templates/backend/go-gin/Makefile.tmpl`)

Specialized commands for backend development:

```bash
# Backend-specific commands
make dev-backend       # Start backend with hot reload
make test-backend      # Run backend tests with coverage
make build-backend     # Build backend binary
make db-migrate        # Run database migrations
```

**Features:**
- Hot reload development server
- Database management commands
- Multi-platform binary builds
- Performance profiling tools{{end}}

## Build Scripts

### Setup Script (`scripts/setup.sh`)

Automated environment setup for new developers:

```bash
# Run complete setup
./scripts/setup.sh

# Skip specific components
./scripts/setup.sh --skip-db --skip-tools
```

**What it does:**
- Checks system requirements
- Installs required tools and dependencies
- Sets up environment files
- Configures database and services
- Validates the installation

### Build Script (`scripts/build.sh`)

Comprehensive build automation:

```bash
# Production build
./scripts/build.sh --mode=production

# Build with Docker images
./scripts/build.sh --docker --all-platforms

# Clean build
./scripts/build.sh --clean --skip-tests
```

**Features:**
- Multi-platform builds
- Docker image creation
- Parallel compilation
- Build artifact packaging
- Comprehensive validation

### Test Script (`scripts/test.sh`)

Advanced testing workflows:

```bash
# Run all tests
./scripts/test.sh

# Specific test types
./scripts/test.sh --mode=unit
./scripts/test.sh --mode=integration
./scripts/test.sh --mode=e2e

# Watch mode for development
./scripts/test.sh --watch
```

**Capabilities:**
- Multiple test types (unit, integration, e2e, security)
- Coverage reporting
- Parallel test execution
- Watch mode for development
- CI/CD integration

### Deployment Script (`scripts/deploy.sh`)

Production-ready deployment automation:

```bash
# Deploy to different environments
./scripts/deploy.sh development
./scripts/deploy.sh staging
./scripts/deploy.sh production

# Dry run deployment
./scripts/deploy.sh production --dry-run
```

**Features:**
- Multi-environment support
- Safety checks for production
- Rollback capabilities
- Health monitoring
- Multiple deployment methods

## Development Workflow

### Initial Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/{{.Organization}}/{{.Name}}.git
   cd {{.Name}}
   ```

2. **Run automated setup**
   ```bash
   make setup
   ```

3. **Start development environment**
   ```bash
   make dev
   ```

### Daily Development

```bash
# Start development servers
make dev

# Run tests during development
make test-watch

# Check code quality
make lint
make format

# Build for testing
make build
```

### Pre-commit Workflow

```bash
# Run full validation
make lint
make test
make build

# Or use the combined command
make validate
```

### Release Workflow

```bash
# Create release build
make build --mode=production

# Run comprehensive tests
make test-all

# Deploy to staging
make deploy-staging

# Deploy to production (after validation)
make deploy-prod
```

## Build Targets

### Setup and Installation

| Target | Description |
|--------|-------------|
| `setup` | Complete development environment setup |
| `install-deps` | Install all project dependencies |
| `check-prerequisites` | Verify required tools are installed |
| `setup-env` | Create environment configuration files |
| `setup-db` | Initialize database and run migrations |

### Development

| Target | Description |
|--------|-------------|
| `dev` | Start all development services |
| `dev-frontend` | Start frontend development servers |
| `dev-backend` | Start backend development server |
| `stop` | Stop all development services |
| `restart` | Restart all development services |

### Testing

| Target | Description |
|--------|-------------|
| `test` | Run all tests |
| `test-unit` | Run unit tests only |
| `test-integration` | Run integration tests |
| `test-e2e` | Run end-to-end tests |
| `test-coverage` | Run tests with coverage reporting |
| `test-watch` | Run tests in watch mode |

### Code Quality

| Target | Description |
|--------|-------------|
| `lint` | Run linting on all code |
| `lint-fix` | Fix linting issues automatically |
| `format` | Format all code |
| `typecheck` | Run type checking |
| `security-scan` | Run security vulnerability scans |

### Building

| Target | Description |
|--------|-------------|
| `build` | Build all applications |
| `build-frontend` | Build frontend applications |
| `build-backend` | Build backend application |
| `build-mobile` | Build mobile applications |
| `docker-build` | Build Docker images |

### Database

| Target | Description |
|--------|-------------|
| `db-migrate` | Run database migrations |
| `db-rollback` | Rollback database migrations |
| `db-reset` | Reset database (destructive) |
| `db-seed` | Seed database with test data |
| `db-status` | Show migration status |

### Deployment

| Target | Description |
|--------|-------------|
| `deploy-dev` | Deploy to development environment |
| `deploy-staging` | Deploy to staging environment |
| `deploy-prod` | Deploy to production environment |
| `k8s-deploy` | Deploy to Kubernetes |
| `terraform-apply` | Apply Terraform infrastructure |

### Maintenance

| Target | Description |
|--------|-------------|
| `clean` | Clean build artifacts |
| `clean-all` | Clean everything including dependencies |
| `update-deps` | Update all dependencies |
| `install-tools` | Install development tools |

### Information

| Target | Description |
|--------|-------------|
| `help` | Show available commands |
| `status` | Show project status |
| `urls` | Show development URLs |
| `env-info` | Show environment information |
| `version` | Show version information |

## Environment Variables

### Global Configuration

```bash
# Project configuration
PROJECT_NAME={{.Name}}
VERSION=1.0.0
BUILD_TIME=2024-01-15T10:30:00Z
GIT_COMMIT=abc1234

# Build configuration
BUILD_MODE=production          # development|production
PARALLEL_BUILDS=true          # Enable parallel builds
SKIP_TESTS=false              # Skip tests during build
SKIP_LINT=false               # Skip linting
CLEAN_BUILD=false             # Clean before build
```

### Development Environment

```bash
# Development servers
{{if .Components.Frontend.MainApp}}FRONTEND_PORT=3000            # Main app port
HOME_PORT=3001                # Home page port
ADMIN_PORT=3002               # Admin dashboard port{{end}}
{{if .Components.Backend.API}}BACKEND_PORT=8080             # API server port{{end}}

# Database configuration
DATABASE_URL=postgresql://user:pass@localhost:5432/{{.Name}}_dev
REDIS_URL=redis://localhost:6379/0

# Feature flags
ENABLE_HOT_RELOAD=true        # Enable hot reloading
ENABLE_DEBUG_MODE=false        # Enable debug logging // SECURITY FIX: Disabled debug info (use env var for dev)
ENABLE_PROFILING=false        # Enable performance profiling
```

### Testing Configuration

```bash
# Test configuration
TEST_MODE=all                 # all|unit|integration|e2e
COVERAGE_ENABLED=true         # Enable coverage reporting
PARALLEL_TESTS=true           # Run tests in parallel
WATCH_MODE=false              # Run tests in watch mode
TEST_TIMEOUT=300s             # Test timeout duration

# Test database
TEST_DATABASE_URL=postgresql://user:pass@localhost:5433/{{.Name}}_test
```

### Deployment Configuration

```bash
# Deployment settings
DEPLOY_METHOD=kubernetes      # docker|kubernetes|terraform
ENVIRONMENT=production        # development|staging|production
DRY_RUN=false                # Perform dry run
SKIP_HEALTH_CHECK=false      # Skip health checks
ROLLBACK_ON_FAILURE=true     # Auto-rollback on failure

# Registry configuration
DOCKER_REGISTRY={{.Organization}}
REGISTRY_USERNAME=username
REGISTRY_PASSWORD=password
```

## Customization

### Adding Custom Commands

Create a `Makefile.local` file in the project root:

```makefile
# Makefile.local - Custom commands

.PHONY: custom-command
custom-command: ## Custom command description
	@echo "Running custom command..."
	# Your custom logic here

.PHONY: team-setup
team-setup: ## Team-specific setup
	@echo "Running team-specific setup..."
	# Team-specific configuration
```

The root Makefile automatically includes `Makefile.local` if it exists.

### Component-Specific Customization

{{if .Components.Frontend.MainApp}}#### Frontend Customization

Create component-specific Makefiles:

```makefile
# App/Makefile - App-specific commands
.PHONY: app-custom
app-custom: ## App-specific command
	@echo "Running app-specific command..."
	npm run custom-script
```{{end}}

{{if .Components.Backend.API}}#### Backend Customization

Add backend-specific commands:

```makefile
# CommonServer/Makefile - Backend-specific commands
.PHONY: backend-custom
backend-custom: ## Backend-specific command
	@echo "Running backend-specific command..."
	go run cmd/custom/main.go
```{{end}}

### Script Customization

#### Environment-Specific Configuration

Create environment files in `Deploy/environments/`:

```bash
# Deploy/environments/production.env
DEPLOY_METHOD=kubernetes
REGISTRY_URL=your-registry.com
NAMESPACE={{.Name}}-prod
REPLICAS=5
HEALTH_CHECK_TIMEOUT=300
```

#### Custom Build Steps

Override build steps by creating custom scripts:

```bash
# scripts/custom-build.sh
#!/bin/bash
echo "Running custom build steps..."
# Your custom build logic
```

Then modify the main build script to call your custom script.

### Hook Integration

#### Pre-commit Hooks

```bash
# .git/hooks/pre-commit
#!/bin/bash
make lint
make test-unit
```

#### CI/CD Integration

```yaml
# .github/workflows/custom.yml
name: Custom Workflow
on: [push]
jobs:
  custom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Custom Build
        run: make custom-command
```

## Troubleshooting

### Common Issues

#### Make Command Not Found

**Problem**: `make: command not found`

**Solutions**:
- **macOS**: `brew install make`
- **Ubuntu/Debian**: `sudo apt-get install build-essential`
- **Windows**: Use WSL2 or install via Chocolatey

#### Permission Denied Errors

**Problem**: Permission denied when running scripts

**Solutions**:
```bash
# Make scripts executable
chmod +x scripts/*.sh

# Or run with bash
bash scripts/setup.sh
```

#### Docker Issues

**Problem**: Docker commands fail

**Solutions**:
```bash
# Check Docker is running
docker info

# Check Docker permissions (Linux)
sudo usermod -aG docker $USER
# Then logout and login again
```

#### Database Connection Issues

**Problem**: Cannot connect to database

**Solutions**:
```bash
# Check database is running
make db-status

# Start database services
make docker-db-up

# Check connection string
echo $DATABASE_URL
```

#### Node.js Version Issues

**Problem**: Node.js version compatibility

**Solutions**:
```bash
# Check Node.js version
node --version

# Install correct version with nvm
nvm install {{.Versions.Node}}
nvm use {{.Versions.Node}}
```

#### Go Module Issues

**Problem**: Go module download failures

**Solutions**:
```bash
# Clean module cache
go clean -modcache

# Re-download modules
go mod download
go mod tidy
```

### Performance Issues

#### Slow Builds

**Solutions**:
- Enable parallel builds: `PARALLEL_BUILDS=true`
- Use Docker layer caching
- Increase system resources
- Use SSD storage

#### Memory Issues

**Solutions**:
- Increase Docker memory limits
- Close unnecessary applications
- Use swap space if needed
- Build components sequentially

### Debugging

#### Verbose Output

```bash
# Enable verbose output
make V=1 target-name

# Debug shell scripts
bash -x scripts/build.sh
```

#### Build Debugging

```bash
# Check build environment
make env-info

# Validate setup
make validate-setup

# Show project status
make status
```

#### Test Debugging

```bash
# Run specific test
make test TEST_FILTER="specific-test"

# Debug test failures
make test-debug

# Check test environment
TEST_DEBUG=false make test // SECURITY FIX: Disabled debug info (use env var for dev)
```

### Getting Help

#### Built-in Help

```bash
# Show all available commands
make help

# Show script help
./scripts/build.sh --help
./scripts/test.sh --help
./scripts/deploy.sh --help
```

#### Documentation

- **Build System**: This document
- **API Documentation**: `docs/API.md`
- **Deployment Guide**: `docs/DEPLOYMENT.md`
- **Contributing Guide**: `CONTRIBUTING.md`

#### Support Channels

- **GitHub Issues**: [Report bugs and request features](https://github.com/{{.Organization}}/{{.Name}}/issues)
- **Discussions**: [Ask questions and share ideas](https://github.com/{{.Organization}}/{{.Name}}/discussions)
- **Email**: devops@{{.Organization}}.com

---

**Questions about the build system?** Check our [FAQ](FAQ.md) or reach out to the development team.

*Last updated: {{.CurrentDate}}*