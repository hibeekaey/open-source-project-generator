name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'CommonServer/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'CommonServer/**'
      - 'go.mod'
      - 'go.sum'

env:
  GO_VERSION: '{{.Versions.Go}}'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: {{.Name | lower}}_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '{{.Versions.Go}}'
        cache-dependency-path: go.sum

    - name: Install dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: .

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/{{.Name | lower}}_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-ci
        GIN_MODE: test
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: backend
        name: backend-coverage

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/{{.Name | lower}}_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-ci
        GIN_MODE: test
      run: |
        go test -v -tags=integration ./tests/integration/...

  build-backend:
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '{{.Versions.Go}}'

    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/server

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-binary
        path: main

  docker-build:
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./CommonServer/Dockerfile
        push: false
        tags: {{.Organization}}/{{.Name | lower}}-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max