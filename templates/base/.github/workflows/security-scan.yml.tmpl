name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'go'{{if .Components.Mobile.Android}}, 'java'{{end}}{{if .Components.Mobile.iOS}}, 'swift'{{end}} ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Setup Go (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '{{.Versions.Go}}'

    - name: Setup Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '{{.Versions.Node}}'

    - name: Setup JDK (for Java analysis)
      if: matrix.language == 'java'
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner for Docker images
      if: github.event_name == 'push'
      run: |
        # Build Docker images first
        docker build -t {{.Organization}}/{{.Name | lower}}-api:latest -f CommonServer/Dockerfile .
        {{if .Components.Frontend.MainApp}}docker build -t {{.Organization}}/{{.Name | lower}}-app:latest -f App/Dockerfile .{{end}}
        {{if .Components.Frontend.Home}}docker build -t {{.Organization}}/{{.Name | lower}}-home:latest -f Home/Dockerfile .{{end}}
        {{if .Components.Frontend.Admin}}docker build -t {{.Organization}}/{{.Name | lower}}-admin:latest -f Admin/Dockerfile .{{end}}
        
        # Scan images
        trivy image --format sarif --output api-trivy-results.sarif {{.Organization}}/{{.Name | lower}}-api:latest
        {{if .Components.Frontend.MainApp}}trivy image --format sarif --output app-trivy-results.sarif {{.Organization}}/{{.Name | lower}}-app:latest{{end}}
        {{if .Components.Frontend.Home}}trivy image --format sarif --output home-trivy-results.sarif {{.Organization}}/{{.Name | lower}}-home:latest{{end}}
        {{if .Components.Frontend.Admin}}trivy image --format sarif --output admin-trivy-results.sarif {{.Organization}}/{{.Name | lower}}-admin:latest{{end}}

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '{{.Versions.Node}}'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '{{.Versions.Go}}'

    - name: Audit Node.js dependencies
      run: |
        {{if .Components.Frontend.MainApp}}
        cd App && npm audit --audit-level=moderate
        {{end}}
        {{if .Components.Frontend.Home}}
        cd Home && npm audit --audit-level=moderate
        {{end}}
        {{if .Components.Frontend.Admin}}
        cd Admin && npm audit --audit-level=moderate
        {{end}}

    - name: Audit Go dependencies
      run: |
        go list -json -deps ./... | nancy sleuth

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=medium

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --offly-verified // SECURITY FIX: Disabled debug info (use env var for dev)

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '{{.Versions.Node}}'

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Check frontend licenses
      run: |
        {{if .Components.Frontend.MainApp}}
        cd App && license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
        {{end}}
        {{if .Components.Frontend.Home}}
        cd Home && license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
        {{end}}
        {{if .Components.Frontend.Admin}}
        cd Admin && license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
        {{end}}

    - name: Check Go licenses
      uses: fossa-contrib/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        project-name: {{.Name}}

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, trivy-scan, dependency-audit, secrets-scan, license-scan]
    if: always()
    
    steps:
    - name: Generate security report
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- Trivy Scan: ${{ needs.trivy-scan.result }}" >> security-report.md
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-report.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md