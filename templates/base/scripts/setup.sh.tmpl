#!/bin/bash

# {{.Name}} - Development Environment Setup Script
# This script sets up the complete development environment

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="{{.Name}}"
ORGANIZATION="{{.Organization}}"
NODE_VERSION="{{.Versions.Node}}"
GO_VERSION="{{.Versions.Go}}"

# Directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
{{if .Components.Frontend.MainApp}}FRONTEND_DIRS=("App"{{if .Components.Frontend.Home}} "Home"{{end}}{{if .Components.Frontend.Admin}} "Admin"{{end}}){{end}}
{{if .Components.Backend.API}}BACKEND_DIR="CommonServer"{{end}}

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# Error handling
handle_error() {
    log_error "Setup failed at line $1"
    exit 1
}

trap 'handle_error $LINENO' ERR

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check system requirements
check_system() {
    log_step "Checking system requirements..."
    
    # Check OS
    case "$(uname -s)" in
        Darwin*)
            OS="macOS"
            PACKAGE_MANAGER="brew"
            ;;
        Linux*)
            OS="Linux"
            if command_exists apt-get; then
                PACKAGE_MANAGER="apt"
            elif command_exists yum; then
                PACKAGE_MANAGER="yum"
            elif command_exists pacman; then
                PACKAGE_MANAGER="pacman"
            else
                log_error "Unsupported Linux distribution"
                exit 1
            fi
            ;;
        CYGWIN*|MINGW32*|MSYS*|MINGW*)
            OS="Windows"
            PACKAGE_MANAGER="choco"
            ;;
        *)
            log_error "Unsupported operating system: $(uname -s)"
            exit 1
            ;;
    esac
    
    log_info "Detected OS: $OS"
    log_info "Package manager: $PACKAGE_MANAGER"
}

# Install package manager if needed
install_package_manager() {
    case "$OS" in
        macOS)
            if ! command_exists brew; then
                log_step "Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                log_success "Homebrew installed"
            else
                log_info "Homebrew already installed"
            fi
            ;;
        Windows)
            if ! command_exists choco; then
                log_step "Installing Chocolatey..."
                powershell -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
                log_success "Chocolatey installed"
            else
                log_info "Chocolatey already installed"
            fi
            ;;
    esac
}

# Check and install prerequisites
check_prerequisites() {
    log_step "Checking prerequisites..."
    
    # Git
    if ! command_exists git; then
        log_warning "Git not found, installing..."
        case "$PACKAGE_MANAGER" in
            brew) brew install git ;;
            apt) sudo apt-get update && sudo apt-get install -y git ;;
            yum) sudo yum install -y git ;;
            pacman) sudo pacman -S git ;;
            choco) choco install git -y ;;
        esac
        log_success "Git installed"
    else
        log_info "Git $(git --version | cut -d' ' -f3) found"
    fi
    
    # Make
    if ! command_exists make; then
        log_warning "Make not found, installing..."
        case "$PACKAGE_MANAGER" in
            brew) brew install make ;;
            apt) sudo apt-get install -y build-essential ;;
            yum) sudo yum groupinstall -y "Development Tools" ;;
            pacman) sudo pacman -S base-devel ;;
            choco) choco install make -y ;;
        esac
        log_success "Make installed"
    else
        log_info "Make found"
    fi
    
{{if .Components.Frontend.MainApp}}    # Node.js
    if ! command_exists node; then
        log_warning "Node.js not found, installing..."
        case "$PACKAGE_MANAGER" in
            brew) 
                brew install node@${NODE_VERSION%%.*}
                ;;
            apt) 
                curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION%%.*}.x | sudo -E bash -
                sudo apt-get install -y nodejs
                ;;
            yum) 
                curl -fsSL https://rpm.nodesource.com/setup_${NODE_VERSION%%.*}.x | sudo bash -
                sudo yum install -y nodejs
                ;;
            pacman) 
                sudo pacman -S nodejs npm
                ;;
            choco) 
                choco install nodejs -y
                ;;
        esac
        log_success "Node.js installed"
    else
        NODE_CURRENT=$(node --version | sed 's/v//')
        log_info "Node.js $NODE_CURRENT found"
        
        # Check version compatibility
        if ! node -e "process.exit(process.version.split('.')[0] >= ${NODE_VERSION%%.*} ? 0 : 1)"; then
            log_warning "Node.js version $NODE_CURRENT is older than required $NODE_VERSION"
            log_info "Consider updating Node.js"
        fi
    fi
    
    # npm
    if ! command_exists npm; then
        log_error "npm not found. Please install Node.js with npm"
        exit 1
    else
        log_info "npm $(npm --version) found"
    fi{{end}}
    
{{if .Components.Backend.API}}    # Go
    if ! command_exists go; then
        log_warning "Go not found, installing..."
        case "$PACKAGE_MANAGER" in
            brew) brew install go ;;
            apt) 
                GO_VERSION_FULL="${GO_VERSION}.linux-amd64"
                wget "https://golang.org/dl/go${GO_VERSION_FULL}.tar.gz"
                sudo tar -C /usr/local -xzf "go${GO_VERSION_FULL}.tar.gz"
                echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
                export PATH=$PATH:/usr/local/go/bin
                rm "go${GO_VERSION_FULL}.tar.gz"
                ;;
            yum) 
                GO_VERSION_FULL="${GO_VERSION}.linux-amd64"
                wget "https://golang.org/dl/go${GO_VERSION_FULL}.tar.gz"
                sudo tar -C /usr/local -xzf "go${GO_VERSION_FULL}.tar.gz"
                echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
                export PATH=$PATH:/usr/local/go/bin
                rm "go${GO_VERSION_FULL}.tar.gz"
                ;;
            pacman) sudo pacman -S go ;;
            choco) choco install golang -y ;;
        esac
        log_success "Go installed"
    else
        GO_CURRENT=$(go version | cut -d' ' -f3 | sed 's/go//')
        log_info "Go $GO_CURRENT found"
    fi{{end}}
    
{{if .Components.Infrastructure.Docker}}    # Docker
    if ! command_exists docker; then
        log_warning "Docker not found, installing..."
        case "$PACKAGE_MANAGER" in
            brew) 
                brew install --cask docker
                log_info "Please start Docker Desktop manually"
                ;;
            apt) 
                sudo apt-get update
                sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                sudo usermod -aG docker $USER
                ;;
            yum) 
                sudo yum install -y yum-utils
                sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            pacman) 
                sudo pacman -S docker docker-compose
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            choco) 
                choco install docker-desktop -y
                ;;
        esac
        log_success "Docker installed"
    else
        log_info "Docker $(docker --version | cut -d' ' -f3 | tr -d ',') found"
    fi{{end}}
}

# Setup environment files
setup_environment() {
    log_step "Setting up environment files..."
    
    cd "$PROJECT_ROOT"
    
    # Root environment file
    if [[ ! -f .env.local ]]; then
        if [[ -f .env.example ]]; then
            cp .env.example .env.local
            log_success "Created .env.local from .env.example"
        else
            log_warning ".env.example not found, creating basic .env.local"
            cat > .env.local << EOF
# {{.Name}} Environment Configuration
APP_NAME={{.Name}}
APP_ENV=development
APP_DEBUG=false // SECURITY FIX: Disabled debug info (use env var for dev)

# Database
DATABASE_URL=postgresql://{{.Name}}_user:password@localhost:5432/{{.Name}}_dev

# Redis
REDIS_URL=redis://localhost:6379/0

# Security
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# API
{{if .Components.Backend.API}}API_BASE_URL=http://localhost:8080{{end}}
{{if .Components.Frontend.MainApp}}FRONTEND_URL=http://localhost:3000{{end}}
EOF
            log_success "Created basic .env.local"
        fi
    else
        log_info ".env.local already exists"
    fi
    
{{if .Components.Backend.API}}    # Backend environment file
    if [[ ! -f "$BACKEND_DIR/.env" ]]; then
        if [[ -f "$BACKEND_DIR/.env.example" ]]; then
            cp "$BACKEND_DIR/.env.example" "$BACKEND_DIR/.env"
            log_success "Created $BACKEND_DIR/.env from example"
        else
            log_warning "$BACKEND_DIR/.env.example not found, creating basic .env"
            mkdir -p "$BACKEND_DIR"
            cat > "$BACKEND_DIR/.env" << EOF
# {{.Name}} Backend Configuration
PORT=8080
GIN_MODE=debug

# Database
DATABASE_URL=postgresql://{{.Name}}_user:password@localhost:5432/{{.Name}}_dev

# Redis
REDIS_URL=redis://localhost:6379/0

# JWT
JWT_SECRET=your-super-secret-jwt-key
JWT_EXPIRY=3600

# CORS
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3002
EOF
            log_success "Created basic $BACKEND_DIR/.env"
        fi
    else
        log_info "$BACKEND_DIR/.env already exists"
    fi{{end}}
}

# Install project dependencies
install_dependencies() {
    log_step "Installing project dependencies..."
    
    cd "$PROJECT_ROOT"
    
{{if .Components.Frontend.MainApp}}    # Frontend dependencies
    for dir in "${FRONTEND_DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            log_info "Installing dependencies for $dir..."
            cd "$dir"
            npm ci
            cd "$PROJECT_ROOT"
            log_success "$dir dependencies installed"
        else
            log_warning "$dir directory not found"
        fi
    done{{end}}
    
{{if .Components.Backend.API}}    # Backend dependencies
    if [[ -d "$BACKEND_DIR" ]]; then
        log_info "Installing backend dependencies..."
        cd "$BACKEND_DIR"
        go mod download
        go mod tidy
        cd "$PROJECT_ROOT"
        log_success "Backend dependencies installed"
    else
        log_warning "$BACKEND_DIR directory not found"
    fi{{end}}
}

# Setup database
setup_database() {
    log_step "Setting up database..."
    
{{if .Components.Infrastructure.Docker}}    # Check if Docker is running
    if command_exists docker && docker info >/dev/null 2>&1; then
        log_info "Starting database services with Docker..."
        
        # Create docker-compose.yml if it doesn't exist
        if [[ ! -f docker-compose.yml ]]; then
            log_warning "docker-compose.yml not found, creating basic configuration..."
            cat > docker-compose.yml << EOF
version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: {{.Name}}_dev
      POSTGRES_USER: {{.Name}}_user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
EOF
            log_success "Created basic docker-compose.yml"
        fi
        
        # Start database services
        docker-compose up -d postgres redis
        
        # Wait for database to be ready
        log_info "Waiting for database to be ready..."
        sleep 10
        
        # Test database connection
        if command_exists psql; then
            until psql "postgresql://{{.Name}}_user:password@localhost:5432/{{.Name}}_dev" -c '\q' 2>/dev/null; do
                log_info "Waiting for PostgreSQL..."
                sleep 2
            done
            log_success "Database is ready"
        else
            log_warning "psql not found, cannot test database connection"
        fi
        
{{if .Components.Backend.API}}        # Run migrations
        if [[ -d "$BACKEND_DIR" ]]; then
            log_info "Running database migrations..."
            cd "$BACKEND_DIR"
            if [[ -f "cmd/migrate/main.go" ]]; then
                go run cmd/migrate/main.go up
                log_success "Database migrations completed"
            else
                log_warning "Migration command not found"
            fi
            cd "$PROJECT_ROOT"
        fi{{end}}
        
    else
        log_warning "Docker not available or not running"
        log_info "Please install and start PostgreSQL and Redis manually"
        log_info "Database: {{.Name}}_dev"
        log_info "User: {{.Name}}_user"
        log_info "Password: password"
    fi{{else}}    log_info "Please install and configure PostgreSQL and Redis manually"
    log_info "Database: {{.Name}}_dev"
    log_info "User: {{.Name}}_user"
    log_info "Password: password"{{end}}
}

# Install development tools
install_dev_tools() {
    log_step "Installing development tools..."
    
{{if .Components.Backend.API}}    # Go tools
    if command_exists go; then
        log_info "Installing Go development tools..."
        go install github.com/cosmtrek/air@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install golang.org/x/tools/cmd/goimports@latest
        go install github.com/swaggo/swag/cmd/swag@latest
        log_success "Go development tools installed"
    fi{{end}}
    
{{if .Components.Frontend.MainApp}}    # Global npm packages
    if command_exists npm; then
        log_info "Installing global npm packages..."
        npm install -g typescript@latest
        npm install -g @types/node@latest
        log_success "Global npm packages installed"
    fi{{end}}
}

# Validate setup
validate_setup() {
    log_step "Validating setup..."
    
    cd "$PROJECT_ROOT"
    
    # Check if make is available
    if command_exists make; then
        log_info "Running validation with make..."
        if make validate-setup 2>/dev/null; then
            log_success "Setup validation passed"
        else
            log_warning "Setup validation failed, but continuing..."
        fi
    else
        log_warning "Make not available, skipping validation"
    fi
    
{{if .Components.Frontend.MainApp}}    # Test frontend builds
    for dir in "${FRONTEND_DIRS[@]}"; do
        if [[ -d "$dir" && -f "$dir/package.json" ]]; then
            log_info "Testing $dir build..."
            cd "$dir"
            if npm run build --silent >/dev/null 2>&1; then
                log_success "$dir build test passed"
            else
                log_warning "$dir build test failed"
            fi
            cd "$PROJECT_ROOT"
        fi
    done{{end}}
    
{{if .Components.Backend.API}}    # Test backend build
    if [[ -d "$BACKEND_DIR" ]]; then
        log_info "Testing backend build..."
        cd "$BACKEND_DIR"
        if go build -o /tmp/{{.Name}}-test ./... >/dev/null 2>&1; then
            rm -f /tmp/{{.Name}}-test
            log_success "Backend build test passed"
        else
            log_warning "Backend build test failed"
        fi
        cd "$PROJECT_ROOT"
    fi{{end}}
}

# Show next steps
show_next_steps() {
    log_success "Setup completed successfully!"
    echo ""
    echo -e "${CYAN}Next steps:${NC}"
    echo "1. Review and update environment variables in .env.local"
{{if .Components.Backend.API}}    echo "2. Review and update backend configuration in $BACKEND_DIR/.env"{{end}}
    echo "3. Start the development environment:"
    echo "   ${YELLOW}make dev${NC}"
    echo ""
    echo -e "${CYAN}Development URLs:${NC}"
{{if .Components.Frontend.MainApp}}    echo "   🌐 Main App: http://localhost:3000"{{end}}
{{if .Components.Frontend.Home}}    echo "   🏠 Home Page: http://localhost:3001"{{end}}
{{if .Components.Frontend.Admin}}    echo "   ⚙️  Admin Dashboard: http://localhost:3002"{{end}}
{{if .Components.Backend.API}}    echo "   🔧 API Server: http://localhost:8080"
    echo "   📚 API Docs: http://localhost:8080/swagger"{{end}}
    echo ""
    echo -e "${CYAN}Useful commands:${NC}"
    echo "   ${YELLOW}make help${NC}        - Show all available commands"
    echo "   ${YELLOW}make test${NC}        - Run all tests"
    echo "   ${YELLOW}make lint${NC}        - Run code linting"
    echo "   ${YELLOW}make build${NC}       - Build all applications"
    echo ""
    echo -e "${GREEN}Happy coding! 🚀${NC}"
}

# Main setup function
main() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    {{.Name}} Setup Script                    ║"
    echo "║              Setting up development environment              ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    check_system
    install_package_manager
    check_prerequisites
    setup_environment
    install_dependencies
    setup_database
    install_dev_tools
    validate_setup
    show_next_steps
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-db)
            SKIP_DB=true
            shift
            ;;
        --skip-tools)
            SKIP_TOOLS=true
            shift
            ;;
        --help|-h)
            echo "{{.Name}} Setup Script"
            echo ""
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --skip-db     Skip database setup"
            echo "  --skip-tools  Skip development tools installation"
            echo "  --help, -h    Show this help message"
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Run main setup
main