# {{.Name}} - iOS App

{{.Description}}

## Overview

This is the iOS application for {{.Name}}, built with Swift and following modern iOS development best practices.

## Tech Stack

- **Language**: Swift {{.Versions.Swift}}
- **UI Framework**: SwiftUI
- **Architecture**: MVVM with Clean Architecture
- **Dependency Injection**: Swift Package Manager
- **Networking**: URLSession + Combine
- **Local Storage**: Core Data
- **Image Loading**: AsyncImage + Kingfisher
- **Testing**: XCTest, XCUITest

## Project Structure

```
{{.Name}}/
├── {{.Name}}/
│   ├── App/
│   │   ├── {{.Name}}App.swift      # App entry point
│   │   └── ContentView.swift       # Root view
│   ├── Core/
│   │   ├── Data/                   # Data layer (repositories, services)
│   │   ├── Domain/                 # Domain layer (use cases, entities)
│   │   └── Presentation/           # Presentation layer (views, view models)
│   ├── Features/                   # Feature modules
│   ├── Shared/                     # Shared components and utilities
│   ├── Resources/                  # Assets, strings, etc.
│   └── Info.plist
├── {{.Name}}Tests/                 # Unit tests
├── {{.Name}}UITests/               # UI tests
├── {{.Name}}.xcodeproj/
└── Podfile                         # CocoaPods dependencies
```

## Getting Started

### Prerequisites

- Xcode 15.0 or later
- iOS 15.0 or later
- Swift {{.Versions.Swift}}
- CocoaPods (for dependencies)

### Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/{{.Organization}}/{{.Name}}.git
   cd {{.Name}}/mobile/ios
   ```

2. **Install dependencies**
   ```bash
   pod install
   ```

3. **Open in Xcode**
   ```bash
   open {{.Name}}.xcworkspace
   ```

4. **Configure API endpoints**
   - Open `{{.Name}}/Core/Configuration/Config.swift`
   - Update the API base URL and other configuration values

5. **Build and run**
   - Select your target device or simulator
   - Press `Cmd+R` to build and run

## Development

### Build Configurations

- **Debug**: Development build with debugging disabled // SECURITY FIX: Disabled debug info (use env var for dev)
- **Release**: Production build with optimizations

### Running Tests

```bash
# Unit tests
xcodebuild test -workspace {{.Name}}.xcworkspace -scheme {{.Name}} -destination 'platform=iOS Simulator,name=iPhone 15'

# UI tests
xcodebuild test -workspace {{.Name}}.xcworkspace -scheme {{.Name}}UITests -destination 'platform=iOS Simulator,name=iPhone 15'
```

### Code Style

This project follows the [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines/) and uses:

- **SwiftLint** for code style enforcement
- **SwiftFormat** for code formatting

```bash
# Install SwiftLint
brew install swiftlint

# Run SwiftLint
swiftlint

# Auto-fix issues
swiftlint --fix
```

## Architecture

The app follows Clean Architecture principles with three main layers:

### Data Layer
- **Repositories**: Coordinate data from multiple sources
- **Services**: Handle API calls and local storage operations
- **Models**: Data transfer objects and Core Data entities

### Domain Layer
- **Use Cases**: Business logic and application rules
- **Entities**: Core business objects
- **Repository Protocols**: Contracts for data access

### Presentation Layer
- **Views**: SwiftUI views and components
- **View Models**: Handle UI state and business logic coordination
- **Navigation**: Screen navigation and deep linking

## Features

- 🎨 **Modern UI**: Built with SwiftUI and iOS design guidelines
- 🏗️ **Clean Architecture**: Separation of concerns with testable code
- 🔄 **Offline Support**: Local caching with Core Data
- 🔐 **Authentication**: Secure user authentication with Keychain
- 📱 **Responsive Design**: Optimized for iPhone and iPad
- 🌙 **Dark Mode**: Full dark mode support
- 🌍 **Internationalization**: Multi-language support with Localizable.strings
- ♿ **Accessibility**: Full VoiceOver and accessibility support
- 🧪 **Testing**: Comprehensive unit and UI tests

## API Integration

The app integrates with the {{.Name}} backend API:

- **Base URL**: Configure in `Config.swift`
- **Authentication**: JWT token-based authentication stored in Keychain
- **Error Handling**: Comprehensive error handling with user-friendly alerts
- **Offline Mode**: Graceful degradation when offline

## Dependencies

### CocoaPods Dependencies
- **Alamofire**: HTTP networking
- **Kingfisher**: Image loading and caching
- **KeychainAccess**: Secure keychain wrapper
- **SwiftLint**: Code style enforcement

### Swift Package Manager Dependencies
- **Combine**: Reactive programming
- **Foundation**: Core system services

## Deployment

### Debug Build
1. Select Debug cofffiguratioff // SECURITY FIX: Disabled debug info (use env var for dev)
2. Build and run on device or simulator

### Release Build
1. Select Release configuration
2. Archive the project (`Product > Archive`)
3. Export for App Store or Ad Hoc distribution

### App Store Deployment
1. Update version and build number in project settings
2. Archive the project
3. Upload to App Store Connect
4. Submit for review

## Testing

### Unit Tests
- Located in `{{.Name}}Tests/`
- Test business logic and data layer
- Use XCTest framework

### UI Tests
- Located in `{{.Name}}UITests/`
- Test user interface and user flows
- Use XCUITest framework

### Test Coverage
- Aim for >80% code coverage
- Run tests with coverage: `Cmd+Shift+U` in Xcode

## Contributing

Please read [CONTRIBUTING.md](../../CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the {{.License}} License - see the [LICENSE](../../LICENSE) file for details.

## Support

For support and questions:
- 📧 Email: support@{{.Organization | lower}}.com
- 🐛 Issues: [GitHub Issues](https://github.com/{{.Organization}}/{{.Name}}/issues)
- 📖 Documentation: [Project Wiki](https://github.com/{{.Organization}}/{{.Name}}/wiki)