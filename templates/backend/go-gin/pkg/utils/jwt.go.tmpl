package utils

import (
	"errors"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

// JWTClaims represents the JWT claims
type JWTClaims struct {
	UserID uint `json:"user_id"`
	jwt.RegisteredClaims
}

// GenerateJWT generates a JWT token for a user with enhanced security
func GenerateJWT(userID uint, secret string, expiration time.Duration) (string, error) {
	if userID == 0 {
		return "", errors.New("invalid user ID")
	}
	if secret == "" {
		return "", errors.New("secret cannot be empty")
	}
	if expiration <= 0 {
		return "", errors.New("expiration must be positive")
	}

	now := time.Now()
	claims := JWTClaims{
		UserID: userID,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(now.Add(expiration)),
			IssuedAt:  jwt.NewNumericDate(now),
			NotBefore: jwt.NewNumericDate(now),
			Issuer:    "{{.Name}}", // Add issuer for additional validation
			Subject:   "user-auth", // Add subject for token purpose identification
		},
	}

	// Use HS256 explicitly for security
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(secret))
}

// GenerateRefreshJWT generates a refresh token with longer expiration
func GenerateRefreshJWT(userID uint, secret string, expiration time.Duration) (string, error) {
	if userID == 0 {
		return "", errors.New("invalid user ID")
	}
	if secret == "" {
		return "", errors.New("secret cannot be empty")
	}
	if expiration <= 0 {
		return "", errors.New("expiration must be positive")
	}

	now := time.Now()
	claims := JWTClaims{
		UserID: userID,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(now.Add(expiration)),
			IssuedAt:  jwt.NewNumericDate(now),
			NotBefore: jwt.NewNumericDate(now),
			Issuer:    "{{.Name}}",
			Subject:   "refresh-token",
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(secret))
}

// ValidateJWT validates a JWT token and returns the claims with enhanced security
func ValidateJWT(tokenString, secret string) (*JWTClaims, error) {
	// Prevent empty or malformed tokens
	if tokenString == "" {
		return nil, errors.New("authentication failed")
	}

	token, err := jwt.ParseWithClaims(tokenString, &JWTClaims{}, func(token *jwt.Token) (interface{}, error) {
		// Explicitly check for HMAC signing method and prevent 'none' algorithm attacks
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, errors.New("authentication failed")
		}
		
		// Additional check to prevent 'none' algorithm
		if token.Method.Alg() == "none" {
			return nil, errors.New("authentication failed")
		}

		// Ensure we're using a secure signing method (HS256 or stronger)
		if token.Method.Alg() != "HS256" && token.Method.Alg() != "HS384" && token.Method.Alg() != "HS512" {
			return nil, errors.New("authentication failed")
		}

		return []byte(secret), nil
	})

	if err != nil {
		// Return generic error to prevent information leakage
		return nil, errors.New("authentication failed")
	}

	if claims, ok := token.Claims.(*JWTClaims); ok && token.Valid {
		// Additional validation: ensure token has required claims
		if claims.UserID == 0 {
			return nil, errors.New("authentication failed")
		}

		// Validate token timing claims
		now := time.Now()
		if claims.ExpiresAt != nil && now.After(claims.ExpiresAt.Time) {
			return nil, errors.New("authentication failed")
		}
		if claims.NotBefore != nil && now.Before(claims.NotBefore.Time) {
			return nil, errors.New("authentication failed")
		}
		if claims.IssuedAt != nil && now.Before(claims.IssuedAt.Time) {
			return nil, errors.New("authentication failed")
		}

		return claims, nil
	}

	return nil, errors.New("authentication failed")
}