package database

import (
	"fmt"
	"log"
	"time"

	"{{.Name}}/internal/config"
	"{{.Name}}/internal/models"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// Initialize initializes the database connection with security configurations and runs migrations
func Initialize(cfg config.DatabaseConfig) (*gorm.DB, error) {
	// Validate configuration
	if err := validateDatabaseConfig(cfg); err != nil {
		return nil, fmt.Errorf("invalid database configuration: %w", err)
	}

	// Build secure DSN with proper escaping
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=%s TimeZone=UTC",
		cfg.Host, cfg.User, cfg.Password, cfg.DBName, cfg.Port, cfg.SSLMode)

	// Configure GORM with security settings
	gormConfig := &gorm.Config{
		Logger: logger.Default.LogMode(logger.Error), // Only log errors in production
		PrepareStmt: true, // Enable prepared statements for security
		DisableForeignKeyConstraintWhenMigrating: false, // Keep foreign key constraints
	}

	db, err := gorm.Open(postgres.Open(dsn), gormConfig)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	// Configure connection pool for security and performance
	sqlDB, err := db.DB()
	if err != nil {
		return nil, fmt.Errorf("failed to get underlying sql.DB: %w", err)
	}

	// Set connection pool settings
	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetMaxOpenConns(100)
	sqlDB.SetConnMaxLifetime(time.Hour)

	// Run migrations with error handling
	if err := runMigrations(db); err != nil {
		return nil, fmt.Errorf("failed to run migrations: %w", err)
	}

	log.Println("Database connection established and migrations completed")
	return db, nil
}

// validateDatabaseConfig validates database configuration for security
func validateDatabaseConfig(cfg config.DatabaseConfig) error {
	if cfg.Host == "" {
		return fmt.Errorf("database host is required")
	}
	if cfg.User == "" {
		return fmt.Errorf("database user is required")
	}
	if cfg.Password == "" {
		return fmt.Errorf("database password is required")
	}
	if cfg.DBName == "" {
		return fmt.Errorf("database name is required")
	}
	if cfg.Port == "" {
		return fmt.Errorf("database port is required")
	}
	
	// Enforce SSL in production
	if cfg.SSLMode != "require" && cfg.SSLMode != "verify-full" {
		log.Println("Warning: SSL mode is not set to 'require' or 'verify-full'. This may be insecure in production.")
	}
	
	return nil
}

// runMigrations runs all database migrations
func runMigrations(db *gorm.DB) error {
	return db.AutoMigrate(
		&models.User{},
		&models.Role{},
		&models.Permission{},
		// Add more models here as needed
	)
}