package middleware

import (
	"net/http"
	"os"
	"strings"

	"github.com/gin-gonic/gin"
)

// CORSMiddleware creates a middleware for handling CORS with enhanced security
func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		origin := c.Request.Header.Get("Origin")
		
		// Get allowed origins from environment variables for better security
		allowedOriginsEnv := os.Getenv("CORS_ALLOWED_ORIGINS")
		var allowedOrigins []string
		
		if allowedOriginsEnv != "" {
			allowedOrigins = strings.Split(allowedOriginsEnv, ",")
			// Trim whitespace from each origin
			for i, origin := range allowedOrigins {
				allowedOrigins[i] = strings.TrimSpace(origin)
			}
		} else {
			// Default allowed origins for development
			allowedOrigins = []string{
				"http://localhost:3000",
				"http://localhost:3001", 
				"http://localhost:3002",
			}
		}
		
		// Check if origin is allowed
		allowed := false
		for _, allowedOrigin := range allowedOrigins {
			if origin == allowedOrigin {
				allowed = true
				break
			}
		}
		
		// Only set CORS headers if origin is allowed
		if allowed {
			c.Header("Access-Control-Allow-Origin", origin)
			c.Header("Access-Control-Allow-Credentials", "true")
		} else if origin != "" {
			// Log potential CORS violation for security monitoring
			// In production, consider logging this to security monitoring system
			c.Header("Access-Control-Allow-Origin", "null")
		}
		
		// Restrict allowed headers to prevent potential security issues
		c.Header("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With, X-Request-ID")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Max-Age", "3600") // 1 hour (reduced from 24 hours)
		
		// Add security headers to prevent common attacks
		c.Header("Vary", "Origin, Access-Control-Request-Method, Access-Control-Request-Headers")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}

		c.Next()
	}
}