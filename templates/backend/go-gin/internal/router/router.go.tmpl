package router

import (
	"{{.Name}}/internal/config"
	"{{.Name}}/internal/controllers"
	"{{.Name}}/internal/middleware"
	"{{.Name}}/internal/repositories"
	"{{.Name}}/internal/services"
	"github.com/gin-gonic/gin"
	"github.com/redis/go-redis/v9"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"gorm.io/gorm"
)

// Initialize initializes the router with all routes and middleware
func Initialize(db *gorm.DB, redis *redis.Client, cfg *config.Config) *gin.Engine {
	// Set Gin mode
	if cfg.App.Environment == "production" {
		gin.SetMode(gin.ReleaseMode)
	}

	r := gin.New()

	// Global middleware (order matters for security)
	r.Use(middleware.SecurityHeadersMiddleware()) // Apply security headers first
	r.Use(middleware.LoggingMiddleware())
	r.Use(middleware.RequestIDMiddleware())
	r.Use(gin.Recovery())
	r.Use(middleware.CORSMiddleware())
	r.Use(middleware.RateLimitMiddleware()) // Apply rate limiting

	// Initialize repositories
	userRepo := repositories.NewUserRepository(db)
	roleRepo := repositories.NewRoleRepository(db)

	// Initialize services
	userService := services.NewUserService(userRepo, roleRepo)
	authService := services.NewAuthService(userService, cfg, redis)

	// Initialize controllers
	authController := controllers.NewAuthController(authService, userService)
	userController := controllers.NewUserController(userService)

	// Health check endpoint
	r.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":  "ok",
			"service": cfg.App.Name,
			"version": cfg.App.Version,
		})
	})

	// Swagger documentation
	if cfg.App.Environment != "production" {
		r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	}

	// API routes
	api := r.Group("/api/v1")
	{
		// Public auth routes
		auth := api.Group("/auth")
		{
			auth.POST("/login", authController.Login)
			auth.POST("/register", authController.Register)
			auth.POST("/refresh", authController.RefreshToken)
			auth.POST("/reset-password", authController.ResetPassword)
			auth.POST("/reset-password/confirm", authController.ConfirmPasswordReset)
		}

		// Protected auth routes
		authProtected := api.Group("/auth")
		authProtected.Use(middleware.AuthMiddleware(cfg, userService))
		{
			authProtected.GET("/me", authController.Me)
			authProtected.POST("/logout", authController.Logout)
			authProtected.POST("/change-password", authController.ChangePassword)
		}

		// Protected user routes
		users := api.Group("/users")
		users.Use(middleware.AuthMiddleware(cfg, userService))
		{
			// Regular user routes (can access own data)
			users.GET("/:id", userController.GetUser)
			users.PUT("/:id", userController.UpdateUser)

			// Admin-only routes
			adminUsers := users.Group("")
			adminUsers.Use(middleware.AdminMiddleware())
			{
				adminUsers.POST("", userController.CreateUser)
				adminUsers.GET("", userController.ListUsers)
				adminUsers.DELETE("/:id", userController.DeleteUser)
				adminUsers.POST("/:id/roles/:roleId", userController.AssignRole)
				adminUsers.DELETE("/:id/roles/:roleId", userController.RemoveRole)
			}
		}

		// Add more route groups here as needed
		// roles := api.Group("/roles")
		// permissions := api.Group("/permissions")
	}

	return r
}